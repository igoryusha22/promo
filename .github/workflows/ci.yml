name: CI-CD

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  lint:
    name: Run ESLint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Use cached node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint

  type-check:
    name: TypeScript Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Use cached node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Run TypeScript validation
        run:  npm run type-check

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [lint, type-check]
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Registry
        run: echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login registry.igoryusha.love -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin

      - name: Generate Build Date
        run: echo "BUILD_DATE=$(date +'%Y_%m_%d_%H_%M_%S')" >> $GITHUB_ENV

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Check for Nginx Changes
        id: check_nginx
        run: |
          if git diff --name-only HEAD^ HEAD | grep -qE '^(docker/nginx/)'; then
            echo "BUILD_NGINX=true" >> $GITHUB_ENV
          else
            echo "BUILD_NGINX=false" >> $GITHUB_ENV
          fi

      - name: Build and Tag Next.js Image
        run: |
          docker build --platform linux/amd64 -f ./docker/nextjs/Dockerfile . \
            -t registry.igoryusha.love/promo/nextjs:build_${BUILD_DATE}

      - name: Build and Tag Nginx Image
        if: env.BUILD_NGINX == 'true'
        run: |
          docker build --platform linux/amd64 -f ./docker/nginx/Dockerfile . \
            -t registry.igoryusha.love/promo/nginx:build_${BUILD_DATE}

      - name: Save Build Date
        run: echo "${BUILD_DATE}" > last_build_date.txt

      - name: Push Next.js Image
        run: |
          docker push registry.igoryusha.love/promo/nextjs:build_${BUILD_DATE}

      - name: Push Nginx Image
        if: env.BUILD_NGINX == 'true'
        run: |
          docker push registry.igoryusha.love/promo/nginx:build_${BUILD_DATE}
